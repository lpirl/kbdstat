#!/usr/bin/env python3

"""
This tool records and displays keyboard statistics.
"""

import argparse
from logging import getLogger, INFO, info, error
from collections import Counter
import curses
from queue import Queue

from pynput import keyboard



KEY_QUEUE = Queue()



class Cleaner(object):

  def __init__(self):
    self._jobs = []

  def add_job(self, func, *args, **kwargs):
    self._jobs.append((func, args, kwargs))

  def do_all_jobs(self):
    while self._jobs:
      self.do_one_job()

  def do_one_job(self):
    # in reverse order:
    func, args, kwargs = self._jobs.pop()
    info("cleanup: func=%s.%s, args=%r, kwargs=%r", func.__module__,
         func.__name__, args, kwargs)
    func(*args, **kwargs)



def main():
  cleaner = Cleaner()
  abnormal_termination = False
  try:
    caught_main(cleaner)
  except Exception as exception:
    error("abnormal termination (see error at end of output)")
    abnormal_termination = True
    raise exception
  finally:
    info("running cleanup jobs")
    cleaner.do_all_jobs()

  if abnormal_termination:
    exit(1)
  else:
    info("success - bye")



def caught_main(cleaner):

  parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  parser.add_argument('-v', '--verbose', action='store_true', default=False,
                      help='turn on verbose messages')

  args = parser.parse_args()

  # set up logger
  logger = getLogger()
  logger.name = ""
  if args.verbose:
    logger.setLevel(INFO)

  # set up curses
  curses.initscr()
  curses.noecho()
  curses.cbreak()
  window = curses.initscr()
  window.scrollok(1)
  cleaner.add_job(curses.endwin)

  # set up keyboard monitoring
  listener = keyboard.Listener(on_press=on_press_handler)
  listener.start()
  cleaner.add_job(listener.stop)

  # set up counters
  all_count = 0
  each_count = Counter()

  # process monitoring output
  while True:
    each_count.update((KEY_QUEUE.get() or "unknown", ))
    all_count += 1

    window.erase()
    for name, count in reversed(each_count.most_common()):
      window.addstr(
        "%.2f%%\t%s%u\n" % (100*count/all_count, name.ljust(12), count)
      )
    window.refresh()


def on_press_handler(key):
  """
  Just throws the key pressed (as string) into the queue to not block
  further input.
  """
  if hasattr(key, "char"):
    KEY_QUEUE.put(key.char)
  else:
    KEY_QUEUE.put(key.name)


if __name__ == '__main__':
  main()
